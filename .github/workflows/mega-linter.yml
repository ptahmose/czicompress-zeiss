---
# MegaLinter GitHub Action configuration file
# More info at https://megalinter.io
name: MegaLinter

on:
  push:
    branches: ["main"]  # run only when merge with main branch
  pull_request:
    branches: ["main"]  # run only when merge with main branch
  workflow_dispatch: {}

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    name: MegaLinter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Use CMake to configure code
        working-directory: czicompress
        run: |
          # Create a build directory and run CMake to generate a "compile_commands.json file".
          # CMake configures the project and generates the necessary files for building.
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Extract include paths and defines for CZIcompress.cpp
        id: extract_flags
        run: |
            # We parse the compile_commands.json file generated by CMake to extract the necessary flags (include paths and defines) and
            # export them for use in the MegaLinter step.
            echo "Parsing compile_commands.json for CZIcompress.cpp"
            # Extract the command line for the file
            COMPILE_COMMAND=$(jq -r '.[] | select(.file | test("CZIcompress\\.cpp$")) | .command' czicompress/build/compile_commands.json)
            echo "Found compile command:"
            echo "$COMPILE_COMMAND"
            # Extract -I and -D flags
            FLAGS=$(echo "$COMPILE_COMMAND" | grep -oE '(-I|-isystem|-D)[^ ]+' | tr '\n' ' ')
            echo "Extracted flags: $FLAGS"
            # Export for next step
            echo "cppcheck_flags=$FLAGS" >> "$GITHUB_OUTPUT"

      # MegaLinter
      - name: MegaLinter
        id: ml
        # You can override MegaLinter flavor used to have faster performances
        # More info at https://megalinter.io/flavors/
        uses: oxsecurity/megalinter/flavors/dotnet@v8
        env:
          # All available variables are described in documentation
          # https://megalinter.io/configuration/
          VALIDATE_ALL_CODEBASE: true
          FILTER_REGEX_EXCLUDE: ^.*[/\\]build/
          CPP_CPPCHECK_ARGUMENTS: >
            --language=c++
            --std=c++17
            --suppress=normalCheckLevelMaxBranches
            ${{ steps.extract_flags.outputs.cppcheck_flags }}

      # Upload MegaLinter artifacts
      - name: Archive production artifacts
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: MegaLinter reports
          path: |
            megalinter-reports
            mega-linter.log
